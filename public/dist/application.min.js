"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0).hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),$state.go("authentication.signin",{},{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess","authentication.signin",{},toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)}})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("checkelements"),ApplicationConfiguration.registerModule("checklists"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("drones"),ApplicationConfiguration.registerModule("flights"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("checkelements").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{roles:["admin"],title:"Checkelements",state:"checkelements",type:"dropdown"}),Menus.addSubMenuItem("topbar","checkelements",{title:"List Checkelements",state:"checkelements.list"}),Menus.addSubMenuItem("topbar","checkelements",{title:"Create Checkelements",state:"checkelements.create"})}]),angular.module("checkelements").config(["$stateProvider",function($stateProvider){$stateProvider.state("checkelements",{"abstract":!0,url:"/checkelements",template:"<ui-view/>",data:{roles:["admin"]}}).state("checkelements.list",{url:"",templateUrl:"modules/checkelements/views/list-checkelements.client.view.html"}).state("checkelements.create",{url:"/create",templateUrl:"modules/checkelements/views/create-checkelement.client.view.html"}).state("checkelements.view",{url:"/:checkelementId",templateUrl:"modules/checkelements/views/view-checkelement.client.view.html"}).state("checkelements.edit",{url:"/:checkelementId/edit",templateUrl:"modules/checkelements/views/edit-checkelement.client.view.html"})}]),angular.module("checkelements").controller("CheckelementsController",["$scope","$stateParams","$location","Authentication","Checkelements",function($scope,$stateParams,$location,Authentication,Checkelements){$scope.authentication=Authentication,$scope.create=function(){var checkelement=new Checkelements({title:this.title,content:this.content});checkelement.$save(function(response){$location.path("checkelements/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(checkelement){if(checkelement){checkelement.$remove();for(var i in $scope.checkelements)$scope.checkelements[i]===checkelement&&$scope.checkelements.splice(i,1)}else $scope.checkelement.$remove(function(){$location.path("checkelements")})},$scope.update=function(){var checkelement=$scope.checkelement;checkelement.$update(function(){$location.path("checkelements/"+checkelement._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.checkelements=Checkelements.query()},$scope.findOne=function(){$scope.checkelement=Checkelements.get({checkelementId:$stateParams.checkelementId})}}]),angular.module("checkelements").factory("Checkelements",["$resource",function($resource){return $resource("api/checkelements/:checkelementId",{checkelementId:"@_id"},{update:{get:{method:"GET",cache:!1},query:{method:"GET",cache:!1,isArray:!0},method:"PUT"}})}]),angular.module("checklists").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{roles:["admin"],title:"Checklists",state:"checklists",type:"dropdown"}),Menus.addSubMenuItem("topbar","checklists",{title:"List checklists",state:"checklists.list"}),Menus.addSubMenuItem("topbar","checklists",{title:"Create checklists",state:"checklists.create"})}]),angular.module("checklists").config(["$stateProvider",function($stateProvider){$stateProvider.state("checklists",{"abstract":!0,url:"/checklists",template:"<ui-view/>",data:{roles:["admin"]}}).state("checklists.list",{url:"",templateUrl:"modules/checklists/views/list-checklists.client.view.html"}).state("checklists.create",{url:"/create",templateUrl:"modules/checklists/views/create-checklist.client.view.html"}).state("checklists.view",{url:"/:checklistId",templateUrl:"modules/checklists/views/view-checklist.client.view.html"}).state("checklists.edit",{url:"/:checklistId/edit",templateUrl:"modules/checklists/views/edit-checklist.client.view.html"})}]),angular.module("checklists").controller("ChecklistsController",["$scope","$stateParams","$location","Authentication","Checklists",function($scope,$stateParams,$location,Authentication,Checklists){$scope.authentication=Authentication,$scope.create=function(){var checklist=new Checklists({title:this.title,content:this.content});checklist.$save(function(response){$location.path("checklists/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(checklist){if(checklist){checklist.$remove();for(var i in $scope.checklists)$scope.checklists[i]===checklist&&$scope.checklists.splice(i,1)}else $scope.checklist.$remove(function(){$location.path("checklists")})},$scope.update=function(){var checklist=$scope.checklist;checklist.$update(function(){$location.path("checklists/"+checklist._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.checklists=Checklists.query()},$scope.findOne=function(){$scope.checklist=Checklists.get({checklistId:$stateParams.checklistId})}}]),angular.module("checklists").factory("Checklists",["$resource",function($resource){return $resource("api/checklists/:checklistId",{checklistId:"@_id"},{get:{method:"GET",cache:!1},query:{method:"GET",cache:!1,isArray:!0},update:{method:"PUT"}})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/views/404.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].roles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.link,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].items[itemIndex].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{isPublic:!1})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("drones").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{roles:["admin"],title:"Drones",state:"drones",type:"dropdown"}),Menus.addSubMenuItem("topbar","drones",{title:"List Drones",state:"drones.list"}),Menus.addSubMenuItem("topbar","drones",{title:"Create Drones",state:"drones.create"})}]),angular.module("drones").config(["$stateProvider",function($stateProvider){$stateProvider.state("drones",{"abstract":!0,url:"/drones",template:"<ui-view/>",data:{roles:["admin"]}}).state("drones.list",{url:"",templateUrl:"modules/drones/views/list-drones.client.view.html"}).state("drones.create",{url:"/create",templateUrl:"modules/drones/views/create-drone.client.view.html"}).state("drones.view",{url:"/:droneId",templateUrl:"modules/drones/views/view-drone.client.view.html"}).state("drones.edit",{url:"/:droneId/edit",templateUrl:"modules/drones/views/edit-drone.client.view.html"})}]),angular.module("drones").controller("DronesController",["$scope","$stateParams","$location","Authentication","Drones",function($scope,$stateParams,$location,Authentication,Drones){$scope.authentication=Authentication,$scope.create=function(){var drone=new Drones({title:this.title,content:this.content});drone.$save(function(response){$location.path("drones/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(drone){if(drone){drone.$remove();for(var i in $scope.drones)$scope.drones[i]===drone&&$scope.drones.splice(i,1)}else $scope.drone.$remove(function(){$location.path("drones")})},$scope.update=function(){var drone=$scope.drone;drone.$update(function(){$location.path("drones/"+drone._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.drones=Drones.query()},$scope.findOne=function(){$scope.drone=Drones.get({droneId:$stateParams.droneId})}}]),angular.module("drones").factory("Drones",["$resource",function($resource){return $resource("api/drones/:droneId",{droneId:"@_id"},{get:{method:"GET",cache:!1},query:{method:"GET",cache:!1,isArray:!0},update:{method:"PUT"}})}]),angular.module("flights").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{roles:["user","admin"],title:"Flights",state:"flights",type:"dropdown"}),Menus.addSubMenuItem("topbar","flights",{roles:["admin","user"],title:"List Flights",state:"flights.list"}),Menus.addSubMenuItem("topbar","flights",{roles:["user"],title:"Create Flights",state:"flights.create"})}]),angular.module("flights").config(["$stateProvider",function($stateProvider){$stateProvider.state("flights",{"abstract":!0,url:"/flights",template:"<ui-view/>",data:{roles:["admin","user"]}}).state("flights.list",{url:"",templateUrl:"modules/flights/views/list-flights.client.view.html"}).state("flights.create",{url:"/create",templateUrl:"modules/flights/views/create-flight.client.view.html"}).state("flights.view",{url:"/:flightId",templateUrl:"modules/flights/views/view-flight.client.view.html"}).state("flights.edit",{url:"/:flightId/edit",templateUrl:"modules/flights/views/edit-flight.client.view.html"})}]),angular.module("flights").controller("FlightsController",["$scope","$stateParams","$location","Authentication","Flights","$http",function($scope,$stateParams,$location,Authentication,Flights,$http){$scope.authentication=Authentication,$scope.create=function(){var flight=new Flights({title:this.title,content:this.content,address:this.address,checklists:$http({method:"GET",url:"/api/checklists"}).then(function(response){return response.data},function(response){console.log("theres an error in checlists")}),drones:$http({method:"GET",url:"/api/drones"}).then(function(response){return response.data},function(response){console.log("ciao errori nei droni")}),postFlightNotes:this.postFlightNotes});flight.$save(function(response){$location.path("flights/"+response._id),$scope.title="",$scope.content="",$scope.address="",$scope.checklists="",$scope.drones="",$scope.postFlightNotes=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(flight){if(flight){flight.$remove();for(var i in $scope.flights)$scope.flights[i]===flight&&$scope.flights.splice(i,1)}else $scope.flight.$remove(function(){$location.path("flights")})},$scope.update=function(){var flight=$scope.flight;flight.$update(function(){$location.path("flights/"+flight._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.flights=Flights.query()},$scope.findOne=function(){$scope.flight=Flights.get({flightId:$stateParams.flightId})}}]),angular.module("flights").factory("Flights",["$resource",function($resource){return $resource("api/flights/:flightId",{flightId:"@_id"},{get:{method:"GET",cache:!1},query:{method:"GET",cache:!1,isArray:!0},update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/views/admin/user-list.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/views/admin/user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/views/admin/user-edit.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(){var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){var redirect_to;$state.previous&&(redirect_to=$state.previous.href),$window.location.href=url+(redirect_to?"?redirect_to="+encodeURIComponent(redirect_to):"")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);